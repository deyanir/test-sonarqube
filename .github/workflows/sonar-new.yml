name: .NET Build and SonarQube Analysis

on:
  workflow_dispatch:

jobs:
  build-and-analyze:
    runs-on: windows-latest

    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Setup .NET SDK
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '6.0'

      # Step 3: Install SonarScanner for .NET
      - name: Install SonarScanner for .NET
        run: |
          dotnet tool install --global dotnet-sonarscanner

      # Step 4: Install Coverlet (for code coverage)
      - name: Install Coverlet
        run: |
          dotnet add package coverlet.msbuild --version 3.1.0

      # Step 5: Start SonarQube Analysis (Begin Step)
      - name: Begin SonarQube Analysis
        run: |
          dotnet sonarscanner begin `
            /k:"sonar-dotnet-scan" `
            /d:sonar.token="${{ secrets.SONAR_TOKEN }}" `
            /d:sonar.host.url="${{ secrets.SONAR_URL }}" `
            /o:"sonar-ad111" `
            /d:sonar.cs.vstest.reportsPaths="**/TestResults/*.xml"

      # Step 6: Build and test the Project with coverage
      - name: Build and Run Tests with Coverage
        run: |
          dotnet build
          dotnet test --collect:"XPlat Code Coverage"


      # Step 7: Publish Code Coverage Report
      # Step 7: Publish Code Coverage Report
      - name: Publish Code Coverage
        run: |
          # PowerShell equivalent to find the coverage report and move it
          $coverageReport = Get-ChildItem -Recurse -Filter "coverage.cobertura.xml" | Select-Object -First 1
          if ($coverageReport) {
            Copy-Item $coverageReport.FullName -Destination "./coverage.cobertura.xml"
            echo "sonar.cs.vstest.reportsPaths=coverage.cobertura.xml" >> $GITHUB_ENV
          } else {
            Write-Host "No coverage report found."
          }


      # Step 8: End SonarQube Analysis
      - name: End SonarQube Analysis
        run: |
          dotnet sonarscanner end `
            /d:sonar.token="${{ secrets.SONAR_TOKEN }}"
